name: ci

on:
  push: {}
  pull_request:
    types:
      - opened
      - synchronize
  workflow_dispatch: {}

jobs:
  build:
    name: Build Go Binaries
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Cache go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('./go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build
        run: |
          sh minify.sh

          export CGO_ENABLED=0
          export GOOS=linux
          export GOARCH=amd64
          go build -trimpath -ldflags="-s -w" -o "dist/onesend-amd64" .
          
          export GOOS=linux
          export GOARCH=arm64
          go build -trimpath -ldflags="-s -w" -o "dist/onesend-arm64" .

          export GOOS=windows
          export GOARCH=amd64
          go build -trimpath -ldflags="-s -w" -o "dist/onesend.exe" .

          cp config.sample.toml dist/config.toml
          touch dist/token.txt

          cd dist
          mv onesend-amd64 onesend
          tar Jcf onesend-ci-${GITHUB_SHA:0:7}-linux-x86_64.tar.xz onesend config.toml token.txt
          mv onesend-arm64 onesend
          tar Jcf onesend-ci-${GITHUB_SHA:0:7}-linux-arm64.tar.xz onesend config.toml token.txt
          zip onesend-ci-${GITHUB_SHA:0:7}-windows-x86_64.zip onesend.exe config.toml token.txt

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: executable
          path: |
            dist/*.tar.xz
            dist/*.zip
